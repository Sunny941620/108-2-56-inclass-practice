"emily007@gmail.com",
ymd_hms("2020-03-26T08:18:40Z")
),
message =
)
commit <- list(
author = list("Martin老師",
"mtlin@gm.ntpu.edu.tw",
ymd_hms("2020-03-25T07:17:40Z")),
committer = list(
"emilyluckey",
"emily007@gmail.com",
ymd_hms("2020-03-26T08:18:40Z")
),
message = c("update")
)
library(jsonlite) # 不少同學這行會有Error，還記得如何排除嗎？
toJSON(commit)
library(lubridate)
`今明天氣預報` <- list(
today = ymd_hms("2020-03-31"), tomorrow = ymd_hms("2020-04-01"),
`台北市` = list(
MaxTemp = 25,
minTemp = 18),
`新北市` = list(
MaxTemp = 24,
minTemp = 15)
)
print(`今明天氣預報`)
committer = list(
name = "emilyluckey",
email = "emily007@gmail.com",
time = ymd_hms("2020-03-26T08:18:40Z")
),
committer = list(
name = "emilyluckey",
email = "emily007@gmail.com",
time = ymd_hms("2020-03-26T08:18:40Z"),
message = c("update")
)
save(commit,listExample,`小明108學年課表D`, file = "today.Rda")
save(commit,listExample,`小明108學年課表D`, file = "today.Rda")
save(commit,listExample,`小明108學年課表C`, file = "today.Rda")
knitr::opts_chunk$set(echo = TRUE)
vectorExample <- c("小明","小英","大雄")
# 有多少位置可選：
length(vectorExample)
library(jsonlite)
fromJSON("https://data.tainan.gov.tw/dataset/4cd9345a-04bf-4328-a97d-314ff78b4763/resource/afc025fc-1ef4-447c-b785-a680391d0ca1/download/tnsport2.json", simplifyDataFrame = F) -> tainanSportsMap
# 有多少名字可選：
names(listExample)
# 有多少名字可選：
names(listExample)
# 有多少名字可選：
listExample$student
listExample$student
# 有多少名字可選：
# 有多少名字可選：
names(listExample)
listExample$student
str(listExample)
fromJSON("http://data.ntpc.gov.tw/api/v1/rest/datastore/382000000A-000157-002",
simplifyDataFrame = F) -> newTaipeiCityVaccine
str(newTaipeiCityVaccine)
length(newTaipeiCityVaccine)
names(newTaipeiCityVaccine)
str(newTaipeiCityVaccine[[1]])
str(newTaipeiCityVaccine$success)
str(newTaipeiCityVaccine[["success"]])
str(tainanSportsMap, max.level = 1)
str(tainanSportsMap, max.level = 1)
str(tainanSportsMap[c(1,382,1076)],max.level = 1)
# 顯示到第一層
str(listExample, max.level=1)
library(listExample)
library(listExample)
vectorExample
vectorExample[c(T,T,F)] # 要，要，不要
str(listExample[c(F,T)]) # 不要，要
str(listExample)
str(listExample)
names(taipeiNightMarkets)
fromJSON("https://www.dropbox.com/s/qnm9bnz7vccrvcz/taipeiNightMarkets.json?dl=1", simplifyDataFrame = F) -> taipeiNightMarkets
names(taipeiNightMarkets)
fromJSON("https://www.dropbox.com/s/qnm9bnz7vccrvcz/taipeiNightMarkets.json?dl=1", simplifyDataFrame = F) -> taipeiNightMarkets
names(taipeiNightMarkets)
c(T,F,F,F,T,F,
F,F,F,T,F,F,
F,T) -> selectedMarkets
taipeiNightMarkets[selectedMarkets]
str(taipeiNightMarkets[c(T,F,F,F,T,F,
F,F,F,T,F,F,
F,T)],max.level = 1)
rep(F,14) #repeat
# 有多少名字可選：
# 有多少名字可選：
names(listExample)
str(taipeiNightMarkets[selectedMarkets],max.level = 1)
get1 <- listExample[["學期"]]
numVector <- c(2,3,6,-1,4,2,6)
select1 <- numVector[c(1,4)]; select1
select2 <- select1[[1]]; select2
# 相當於
numVector[c(1,4)][[1]]
select1 <- numVector[c(T,T,F,T,F,F,T)]; select1
select2 <- select1[c(1,4)]; select2
# 相當於
numVector[c(T,T,F,T,F,F,T)][c(1,4)]
majors <- c("經濟學系","經濟學系","社會學系","社工系","經濟學系")
names <- c("小英", "小美", "大雄","阿華", "阿尼")
gender <- c("F","F","M","F","M")
econOnly <- majors[c(1,2,5)]
names[econOnly]
gender[econOnly]
econFemaleOnly <-gender[econOnly][c(T,T,F)]
names[econOnly][econFemaleOnly]
knitr::opts_chunk$set(echo = TRUE)
with_tz(tpeTime, tzone="UTC")
with_tz(tpeTime, tzone="UTC")
knitr::opts_chunk$set(echo = TRUE)
fromJSON("http://data.ntpc.gov.tw/api/v1/rest/datastore/382000000A-000157-002",
simplifyDataFrame = F) -> newTaipeiCityVaccine
fromJSON("http://data.ntpc.gov.tw/api/v1/rest/datastore/382000000A-000157-002",
simplifyDataFrame = F) -> newTaipeiCityVaccine
fromJSON("https://www.dropbox.com/s/qnm9bnz7vccrvcz/taipeiNightMarkets.json?dl=1", simplifyDataFrame = F) -> taipeiNightMarkets
library(jsonlite)
fromJSON("https://www.dropbox.com/s/qnm9bnz7vccrvcz/taipeiNightMarkets.json?dl=1", simplifyDataFrame = F) -> taipeiNightMarkets
names(taipeiNightMarkets)
c(T,F,F,F,T,F,
F,F,F,T,F,F,
F,T) -> selectedMarkets
taipeiNightMarkets[selectedMarkets]
str(taipeiNightMarkets[c(T,F,F,F,T,F,
F,F,F,T,F,F,
F,T)],max.level = 1)
library(jsonlite)
fromJSON("http://data.ntpc.gov.tw/api/v1/rest/datastore/382000000A-000157-002",
simplifyDataFrame = F) -> newTaipeiCityVaccine
source('C:/Users/Sunny/Downloads/studentEnvironmentReport (1).R')
source('C:/Users/Sunny/Downloads/studentEnvironmentReport (1).R')
warning(
'Please upload the following file: \n',
file.path(getwd(),"report.txt"),
'\nto the following website:\n',
'https://forms.gle/vPoQ1MC4cNEJuNqM8'
)
warning(
'Please upload the following file: \n',
file.path(getwd(),"report.txt"),
'\nto the following website:\n',
'https://forms.gle/vPoQ1MC4cNEJuNqM8'
)
if(!require("readr")){
install.packages("readr")
}
sink("report.txt")
Sys.getenv()
Sys.getlocale()
readr::locale()
sessionInfo()
sink()
warning(
'Please upload the following file: \n',
file.path(getwd(),"report.txt"),
'\nto the following website:\n',
'https://forms.gle/vPoQ1MC4cNEJuNqM8'
)
knitr::opts_chunk$set(echo = TRUE)
library(jsonlite)
fromJSON("https://data.ntpc.gov.tw/od/data/api/54DDDC93-589C-4858-9C95-18B2046CC1FC?$format=json", simplifyDataFrame = F) -> newTaipeiYouBike
newTaipeiYouBike[[5]][-c(3,4)] -> newTaipeiYouBike[[5]]
newTaipeiYouBike[[5]]
newTaipeiYouBike[[5]][c(3,4)] <- NULL
newTaipeiYouBike[[5]]
knitr::opts_chunk$set(echo = TRUE)
# p=1.2的需求量
p=1.2
qd <- 10-5*p # 小心是5*p, 不能寫5p
# p=1.3的需求量
p=1.3
qd <- 10-5*p
# p=1.4的需求量
p=1.4
qd <- 10-5*p
# p=1.2的需求量
demand(1.2)
demand <- # 創造一個物件叫demand
function(p){ # 定義這個物件為函數
q_d <- 10-5*p # 小心是5*p, 不能寫5p
}
# p=1.2的需求量
demand(1.2)
# p=1.3的需求量
demand(1.3)
# p=1.4的需求量
demand(1.4)
demand_return <-
function(p){
q_d <- 10-5*p
return(q_d)
}
# 印在螢幕，但Global Environment並不會有q_d
demand_return(1.2)
.Last.value
# 要長久存在Global Environment要指定物件名稱（不要求與q_d同名）
demand_return(1.2) -> q_d1.2
demand_return(1.2) # 相當於
4
demand_return(1.2) -> q_d1.2 # 相當於
4 -> q_d1.2
dateInput <- today()
library(lubridate)
dateInput <- today()
locationInput <- "新北市"
jsonlite::fromJSON("https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/F-C0032-001?Authorization=rdec-key-123-45678-011121314&format=JSON") ->
weather_next36hours
# 找出符合地點的天氣資訊：weatherAtLocation
(weather_next36hours$cwbopendata$dataset$location$locationName == locationInput) -> pick_location # 可挑出locationInput的「要/不要」向量
weather_next36hours$cwbopendata$dataset$location$weatherElement[pick_location][[1]] -> weatherAtLocation
# 在weatherAtLocation找出符合時間的天氣資訊
(weatherAtLocation$elementName=="MaxT") ->
pick_MaxT
(weatherAtLocation$elementName=="MinT") ->
pick_MinT
weatherAtLocation$time[pick_MaxT][[1]]$parameter$parameterName[[1]] -> maxT
weatherAtLocation$time[pick_MinT][[1]]$parameter$parameterName[[1]] -> minT
glue::glue("{locationInput} {dateInput} 氣溫，最高{maxT}度，最低{minT}度。")
askSilly_weather <- function(locationInput,dateInput){
jsonlite::fromJSON("https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/F-C0032-001?Authorization=rdec-key-123-45678-011121314&format=JSON") ->
weather_next36hours
(weather_next36hours$cwbopendata$dataset$location$locationName == locationInput) -> pick_location
weather_next36hours$cwbopendata$dataset$location$weatherElement[pick_location][[1]] -> weatherAtLocation
(weatherAtLocation$elementName=="MaxT") ->
pick_MaxT
(weatherAtLocation$elementName=="MinT") ->
pick_MinT
weatherAtLocation$time[pick_MaxT][[1]]$parameter$parameterName[[1]] -> maxT
weatherAtLocation$time[pick_MinT][[1]]$parameter$parameterName[[1]] -> minT
glue::glue("{locationInput} {dateInput} 氣溫，最高{maxT}度，最低{minT}度。")
}
askSilly_weather <- function(locationInput){
jsonlite::fromJSON("https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/F-C0032-001?Authorization=rdec-key-123-45678-011121314&format=JSON") ->
weather_next36hours
(weather_next36hours$cwbopendata$dataset$location$locationName == locationInput) -> pick_location
weather_next36hours$cwbopendata$dataset$location$weatherElement[pick_location][[1]] -> weatherAtLocation
(weatherAtLocation$elementName=="MaxT") ->
pick_MaxT
(weatherAtLocation$elementName=="MinT") ->
pick_MinT
weatherAtLocation$time[pick_MaxT][[1]]$parameter$parameterName[[1]] -> maxT
weatherAtLocation$time[pick_MinT][[1]]$parameter$parameterName[[1]] -> minT
glue::glue("{locationInput} {dateInput} 氣溫，最高{maxT}度，最低{minT}度。")
}
askSilly_weather("臺中市")
askSilly_weather("花蓮縣")
library(lubridate)
what_time_it_is <-
function(locationInput){
time <- lubridate::with_tz(now(),tzone = locationInput)
return(time)
}
what_time_it_is("Europe/Paris")
library(lubridate)
what_time_it_is <-
function(timezone){
time <- with_tz(now(),tzone = timezone)
return(time)
}
what_time_it_is("Europe/Paris")
class(demand_return)
# 查詢函數formals arguments要求
formals(askSilly_weather)
# 查詢函數主體
body(askSilly_weather)
learning_topics <-
list(
subject="函數",
date=lubridate::ymd("2020-06-03"),
functionsCreated=list(
demand=demand_return # 等號右邊是呼叫demand_return的定義值，也就是function(...){...}值定義本身。
)
)
View(learning_topics)
typeof(demand_return)
# 查詢函數執行所要求環境
environment(demand_return)
# 若函數執行需要Global environment已存在某些物件，查詢需要哪些物件
codetools::findGlobals(demand_return)
install.packages("codetools")
knitr::opts_chunk$set(echo = TRUE)
intercept <- 10
slope <- -5
myDemand <- function(p){
q_d <- intercept + slope*p
return(q_d)
}
environment(demand_return)
environment(myDemand)
codetools::findGlobals(demand_return)
codetools::findGlobals(myDemand)
# myDemand對Global environment的要求多了intercept及slope
# 移除global environment裡的intercept及slope
rm(intercept, slope)
demand_return(1.2) # 維持正常運作
myDemand(1.2) # 無法運作
intercept <- 10
slope <- -5
myDemand(1.2)
slope <- -1
myDemand(1.2)
intercept <- 5
slope <- -1.2
myDemand(1.2)
myDemand2 <- function(p, intercept=10, slope=-5){
q_d <- intercept + slope*p
return(q_d)
}
environment(myDemand2)
findGlobals(myDemand2) # 不依靠global env裡的intercept/slope
environment(myDemand2)
codetools::findGlobals(myDemand2) # 不依靠global env裡的intercept/slope
myDemand2(1.2)
myDemand2(1.2, slope=-1)
myDemand2(1.2, intercept=5, slope=-1.2)
knitr::opts_chunk$set(echo = TRUE)
if(condition){
Body for TRUE
# 先執行此行輸入學號
readline(prompt = "請輸入你的學號") -> studentId
knitr::opts_chunk$set(echo = TRUE)
# 先執行此行輸入學號
readline(prompt = "請輸入你的學號") -> studentId
knitr::opts_chunk$set(echo = TRUE)
# 檢視步驟耗時elapse time
system.time(
jsonlite::fromJSON("https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/F-C0032-001?Authorization=rdec-key-123-45678-011121314&format=JSON") ->
weather_next36hours
)
if(!exists("weather_next36hours")){
jsonlite::fromJSON("https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/F-C0032-001?Authorization=rdec-key-123-45678-011121314&format=JSON") ->
weather_next36hours
SOAR::Store(weather_next36hours) # 存在.R_cache environment中
}
jsonlite::fromJSON("https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/F-C0032-001?Authorization=rdec-key-123-45678-011121314&format=JSON") ->
weather_next36hours
View(weather_next36hours)
askSilly_weather2 <- function(locationInput,dateInput){
if(!exists("weather_next36hours")){
jsonlite::fromJSON("https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/F-C0032-001?Authorization=rdec-key-123-45678-011121314&format=JSON") ->
weather_next36hours
SOAR::Store(weather_next36hours) # 存在.R_cache environment中
}
(weather_next36hours$cwbopendata$dataset$location$locationName == locationInput) -> pick_location
weather_next36hours$cwbopendata$dataset$location$weatherElement[pick_location][[1]] -> weatherAtLocation
(weatherAtLocation$elementName=="MaxT") ->
pick_MaxT
(weatherAtLocation$elementName=="MinT") ->
pick_MinT
weatherAtLocation$time[pick_MaxT][[1]]$parameter$parameterName[[1]] -> maxT
weatherAtLocation$time[pick_MinT][[1]]$parameter$parameterName[[1]] -> minT
glue::glue("{locationInput} {dateInput} 氣溫，最高{maxT}度，最低{minT}度。")
}
library(lubridate)
system.time(
askSilly_weather("新北市",today())
)
knitr::opts_chunk$set(echo = TRUE)
if(!exists("weather_next36hours")){
jsonlite::fromJSON("https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/F-C0032-001?Authorization=rdec-key-123-45678-011121314&format=JSON") ->
weather_next36hours
SOAR::Store(weather_next36hours) # 存在.R_cache environment中
}
askSilly_weather2 <- function(locationInput,dateInput){
if(!exists("weather_next36hours")){
jsonlite::fromJSON("https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/F-C0032-001?Authorization=rdec-key-123-45678-011121314&format=JSON") ->
weather_next36hours
SOAR::Store(weather_next36hours) # 存在.R_cache environment中
}
(weather_next36hours$cwbopendata$dataset$location$locationName == locationInput) -> pick_location
weather_next36hours$cwbopendata$dataset$location$weatherElement[pick_location][[1]] -> weatherAtLocation
(weatherAtLocation$elementName=="MaxT") ->
pick_MaxT
(weatherAtLocation$elementName=="MinT") ->
pick_MinT
weatherAtLocation$time[pick_MaxT][[1]]$parameter$parameterName[[1]] -> maxT
weatherAtLocation$time[pick_MinT][[1]]$parameter$parameterName[[1]] -> minT
glue::glue("{locationInput} {dateInput} 氣溫，最高{maxT}度，最低{minT}度。")
}
library(lubridate)
system.time(
askSilly_weather("新北市",today())
)
install.packages("lubridate")
knitr::opts_chunk$set(echo = TRUE)
library(lubridate)
system.time(
askSilly_weather("新北市",today())
)
SOAR::Remove(weather_next36hours)
system.time(
askSilly_weather2("新北市",today())
)
system.time(
askSilly_weather2("臺北市",today())
)
askSilly_weather2("新北市",today())
askSilly_weather2("臺北市",today())
# n 為偶數
n <- 54
fvalue <- n/2
# n 為奇數
n <- 33
fvalue <- -(n+1)/2
n <- 54
if(as.logical(n %% 2)){
fvalue <- -(n+1)/2
} else {
fvalue <- n/2
}
myFun <- function(n){
if(as.logical(n %% 2)){
fvalue <- -(n+1)/2
} else {
fvalue <- n/2
}
return(fvalue)
}
myFun(54)
myFun(33)
jsonlite::fromJSON("https://www.dropbox.com/s/d14j5hp3i5ps657/examSubmissionTimes.json?dl=1") -> examSubmissionTime
head(examSubmissionTime$section)
head(examSubmissionTime$time)
i<-1
student_i_section <- examSubmissionTime$section[[i]]
student_i_time <- examSubmissionTime$time[[i]]
deadline <- lubridate::ymd_hms("2020-05-27 15:00:00", tz="Asia/Taipei") #
howEarly <- deadline - lubridate::ymd_hms(
student_i_time, tz="Asia/Taipei")
print(howEarly)
student_i_section=="56"
compute_howEarly <- function(student_i_section, student_i_time){
# student_i_section <- examSubmissionTime$section[[i]]
# student_i_time <- examSubmissionTime$time[[i]]
if(student_i_section=="56"){
deadline <- lubridate::ymd_hms("2020-05-27 15:00:00", tz="Asia/Taipei")
} else {
deadline <- lubridate::ymd_hms("2020-05-27 17:00:00", tz="Asia/Taipei")
}
howEarly <- deadline - lubridate::ymd_hms(student_i_time, tz="Asia/Taipei")
# print(howEarly)
return(howEarly)
}
compute_howEarly(examSubmissionTime$section[[1]],examSubmissionTime$time[[1]])
compute_howEarly(examSubmissionTime$section[[2]],examSubmissionTime$time[[2]])
compute_howEarly(examSubmissionTime$section[[3]],examSubmissionTime$time[[3]])
library(magrittr)
list_howEarly %>%
unlist() -> examSubmissionTime$howEarly
studentSequence <- 1:length(examSubmissionTime$section)
map(studentSequence,
~compute_howEarly(
examSubmissionTime$section[[.x]],
examSubmissionTime$time[[.x]])
) -> list_howEarly
compute_howEarly(examSubmissionTime$section[[1]],examSubmissionTime$time[[1]])
compute_howEarly(examSubmissionTime$section[[2]],examSubmissionTime$time[[2]])
compute_howEarly(examSubmissionTime$section[[3]],examSubmissionTime$time[[3]])
studentSequence <- 1:length(examSubmissionTime$section)
map(studentSequence,
~compute_howEarly(
examSubmissionTime$section[[.x]],
examSubmissionTime$time[[.x]])
) -> list_howEarly
install.packages("MAP")
studentSequence <- 1:length(examSubmissionTime$section)
map(studentSequence,
~compute_howEarly(
examSubmissionTime$section[[.x]],
examSubmissionTime$time[[.x]])
) -> list_howEarly
library(magrittr)
list_howEarly %>%
unlist() -> examSubmissionTime$howEarly
i<-1
student_i_section <- examSubmissionTime$section[[i]]
student_i_time <- examSubmissionTime$time[[i]]
if(student_i_section=="56"){
deadline <- lubridate::ymd_hms("2020-05-27 15:00:00", tz="Asia/Taipei")
} else {
deadline <- lubridate::ymd_hms("2020-05-27 17:00:00", tz="Asia/Taipei")
}
howEarly <- deadline - lubridate::ymd_hms(student_i_time, tz="Asia/Taipei")
print(howEarly)
compute_howEarly <- function(student_i_section, student_i_time){
# student_i_section <- examSubmissionTime$section[[i]]
# student_i_time <- examSubmissionTime$time[[i]]
if(student_i_section=="56"){
deadline <- lubridate::ymd_hms("2020-05-27 15:00:00", tz="Asia/Taipei")
} else {
deadline <- lubridate::ymd_hms("2020-05-27 17:00:00", tz="Asia/Taipei")
}
howEarly <- deadline - lubridate::ymd_hms(student_i_time, tz="Asia/Taipei")
# print(howEarly)
return(howEarly)
}
compute_howEarly(examSubmissionTime$section[[1]],examSubmissionTime$time[[1]])
compute_howEarly(examSubmissionTime$section[[2]],examSubmissionTime$time[[2]])
compute_howEarly(examSubmissionTime$section[[3]],examSubmissionTime$time[[3]])
library(magrittr)
list_howEarly %>%
unlist() -> examSubmissionTime$howEarly
readline("請輸入你的成績（整數）： ") -> grade # 單獨執行
